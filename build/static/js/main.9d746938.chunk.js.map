{"version":3,"sources":["components/NavBar.js","components/Banner.js","components/IconCard.js","App.js","index.js"],"names":["style","bgDark","backgroundColor","NavBar","props","className","status","currentScore","topScore","logoIcon","width","heigth","Banner","IconCard","id","value","onClick","clickedPlayer","src","image","alt","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","result","clicked","Icons","gameOver","console","log","includes","resetGame","pointIncrease","push","setState","score","resetIconArray","points","newScramble","this","map","icon","Component","ReactDOM","render","document","getElementById"],"mappings":"i8BAEMA,G,MAAQ,CACVC,OAAQ,CACJC,gBAAgB,iBAeTC,EAXA,SAAAC,GAAK,OAChB,4BAAQJ,MAAOA,EAAMC,OAAQI,UAAU,uCACnC,yBAAKA,UAAU,IACX,uBAAGA,UAAU,0BAAb,eACA,uBAAGA,UAAU,0BAAb,iBAAqDD,EAAME,QAC3D,uBAAGD,UAAU,0BAAb,UAA8CD,EAAMG,cACpD,uBAAGF,UAAU,sBAAb,eAA+CD,EAAMI,aCZ3DR,EAAQ,CACZS,SAAU,CACRC,MAAO,IACPC,OAAQ,KAEVV,OAAQ,CACNC,gBAAgB,gBAYLU,EARA,SAAAR,GAAK,OAClB,6BAASJ,MAAOA,EAAMC,OAAQI,UAAU,8BACtC,qGCDWQ,EAVE,SAAAT,GAAK,OACpB,6BAASU,GAAIV,EAAMU,GAAIT,UAAU,4CAA4CU,MAAOX,EAAMU,GAAIE,QAAS,kBACvGZ,EAAMa,cAAcb,EAAMU,MAExB,6BAAST,UAAU,WACjB,yBAAKa,IAAKd,EAAMe,MAAOd,UAAU,KAAKe,IAAI,iB,OCK1CC,G,YAAe,SAACC,GAEpB,IADA,IAAIC,EAAUD,EAAME,OACbD,EAAU,GAAG,CAClB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAEnCM,EAAOP,IADXC,GAEAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASI,EAEjB,OAAOP,IAoGMQ,E,2MA/FbC,MAAQ,CACNxB,aAAc,EACdC,SAAU,EACVwB,OAAQ,GACRC,QAAS,GACTC,QACAC,UAAU,G,EAWZlB,cAAgB,SAACH,GACfsB,QAAQC,IAAR,4BAAiCvB,IAC7B,EAAKiB,MAAME,QAAQK,SAASxB,GAO9B,EAAKyB,aANL,EAAKC,gBACL,EAAKT,MAAME,QAAQQ,KAAK3B,GACxB,EAAK4B,SAAS,CACZP,UAAU,M,EAMhBK,cAAgB,WACd,IAAIG,EAAQ,EAAKZ,MAAMxB,aAAe,EACtC6B,QAAQC,IAAR,2BAAgCM,IAC5BA,IAAU,EAAKZ,MAAMG,MAAMV,OAC7B,EAAKkB,SAAS,CACZV,OAAQ,2CACRxB,SAAUmC,EACVpC,aAAc,EACd0B,QAAS,GACTC,QACAC,UAAU,IAEHQ,EAAQ,EAAKZ,MAAMvB,SAC5B,EAAKkC,SAAS,CACZlC,SAAUmC,EACVpC,aAAcoC,EACdX,OAAQ,oBAGV,EAAKU,SAAS,CACZnC,aAAcoC,EACdX,OAAQ,aAGZ,EAAKY,kB,EAIPL,UAAY,WACV,EAAKG,SAAS,CACZG,OAAQ,EACRtC,aAAc,EACdC,SAAU,EAAKuB,MAAMvB,SACrBwB,OAAQ,aACRC,QAAS,GACTC,QACAC,UAAU,IAEZC,QAAQC,IAAI,YAAa,EAAKN,MAAMI,UACpC,EAAKS,kB,EAIPA,eAAiB,WACf,IAAIE,EAAczB,EAAaa,GAC/B,EAAKQ,SAAS,CAACR,MAAOY,K,mFA/DtBC,KAAKL,SAAS,CAACV,OAAQ,kD,+BAiEf,IAAD,OACP,OACE,yBAAK3B,UAAU,aACb,kBAAC,EAAD,CAAQG,SAAUuC,KAAKhB,MAAMvB,SAAUD,aAAcwC,KAAKhB,MAAMxB,aAAcD,OAAQyC,KAAKhB,MAAMC,SACjG,kBAAC,EAAD,MACA,yBAAK3B,UAAU,aACZ0C,KAAKhB,MAAMG,MAAMc,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACAnC,GAAImC,EAAKnC,GACTK,MAAO8B,EAAK9B,MACZF,cAAe,EAAKA,yB,GAxFdiC,aCnBlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9d746938.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n    bgDark: {\n        backgroundColor: `transparent`\n    }\n}\n\nconst NavBar = props => (\n    <header style={style.bgDark} className=\"w-100 ph3 pv3 pv2-ns ph4-m ph5-l tc\">\n        <nav className=\"\">\n            <p className=\"link dim white dib mr3\">Clicky Game</p>\n            <p className=\"link dim white dib mr3\">Your guess is {props.status}</p>\n            <p className=\"link dim white dib mr3\">Score: {props.currentScore}</p>\n            <p className=\"link dim white dib\">High Score: {props.topScore}</p>\n        </nav>\n    </header>\n)\n\nexport default NavBar;","import React from 'react';\n\nconst style = {\n  logoIcon: {\n    width: 150,\n    heigth: 100\n  },\n  bgDark: {\n    backgroundColor: `transparent`\n  }\n}\n\nconst Banner = props => (\n  <article style={style.bgDark} className=\"mw7 center tc mb5 animated\">\n    <h2>\n    Do the Clicky thing on any image, don't click the same image twice!\n    </h2>\n  </article>\n);\n\nexport default Banner;","import React from 'react';\n\n\nconst IconCard = props => (\n  <section id={props.id} className=\"tc pa3 hvr-float-shadow animated zoomInUp\" value={props.id} onClick={() =>\n  props.clickedPlayer(props.id)\n  }>\n    <article className=\"w4 pa2 \">\n      <img src={props.image} className=\"db\" alt=\"game-char\" />\n    </article>\n  </section>\n)\n\nexport default IconCard;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// created components of page\nimport NavBar from './components/NavBar';\nimport Banner from './components/Banner';\nimport IconCard from './components/IconCard';\nimport Icons from './icons.json';\nimport \"./components/IconCard.css\";\nimport 'tachyons'\n\n// while there are element in the array, pick an index at random to replace it with\nconst shuffleArray = (array) => {\n  let counter = array.length;\n  while (counter > 0) {\n    let index = Math.floor(Math.random() * counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n  return array;\n};\n\nclass App extends Component {\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  // display starting message when page loads and component is mounted\n  componentDidMount() {\n    this.setState({result: \"Do the Clicky thing to begin the game thing\"})\n  }\n\n  // when an image is clicked,\n  // increase points\n  // add id of the element to an array to keep track of what has been clicked\n  clickedPlayer = (id) => {\n    console.log(`image clicked id: ${id}`);\n    if(!this.state.clicked.includes(id)){\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  }\n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    console.log(`current score is ${score}`);\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"Winner! Click again to start a new game!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        Icons,\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"New High Score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"Correct!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  // reset the game when the player makes a mistake\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore: 0,\n      topScore: this.state.topScore,\n      result: \"Incorrect!\",\n      clicked: [],\n      Icons,\n      gameOver: true\n    });\n    console.log('Game Over', this.state.gameOver);\n    this.resetIconArray();\n  }\n\n  // shuffle the image array with a shuggle algorythm\n  resetIconArray = () => {\n    let newScramble = shuffleArray(Icons);\n    this.setState({Icons: newScramble})\n  }\n  render() {\n    return (\n      <div className='container'>\n        <NavBar topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result}/>\n        <Banner />\n        <div className='mainStyle'>\n          {this.state.Icons.map(icon => (\n            <IconCard\n            id={icon.id}\n            image={icon.image}\n            clickedPlayer={this.clickedPlayer}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}